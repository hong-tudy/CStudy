**OSI 7계층을 설명하시오**

- 정답
    
    **물리** : 전송하는데 필요한 기능을 제공 ( 통신 케이블, 허브 )
    
    **데이터링크** : 송/수신 확인. MAC 주소를 가지고 통신함 ( 브릿지, 스위치 )
    
    **네트워크** : 패킷을 네트워크 간의 IP를 통해 데이터 전달 ( 라우팅 )
    
    **전송** : 두 host 시스템으로부터 발생하는 데이터 흐름 제공
    
    **세션** : 통신 시스템 사용자간의 연결을 유지 및 설정함
    
    **표현** : 세션 계층 간의 주고받는 인터페이스를 일관성있게 제공
    
    **응용** : 사용자가 네트워크에 접근할 수 있도록 서비스 제공
    

**왜 계층을 나눴을까요?** 

- 정답
    
    계층을 나눈 이유는 통신이 일어나는 과정이 단계별로 파악할 수 있기 때문입니다.
    
    7계층을 나누어서 만약 7계층에서 하나가 오류가 발생하게 되면 다른 계층을 건들이지 않고 문제가 발생한 계층만 건들여서 고칠 수 있기 때문입니다.

**TCP와 UDP의 차이를 설명해주세요.**

- 정답
    
    TCP는 연결형 서비스로 3-way handshaking 과정을 통해 연결을 설정하기 때문에 높은 신뢰성을 보장하지만, 속도가 비교적 느리다는 단점이 있습니다. UDP는 비연결형 서비스로 3-way handshaking을 사용하지 않기 때문에 신뢰성이 떨어지는 단점이 있지만, 데이터 수신 여부를 확인하지 않기 때문에 속도가 빠르다는 장점이 있습니다. TCP는 신뢰성이 중요한 파일 교환과 같은 경우에 쓰이고 UDP는 실시간성이 중요한 스트리밍에 자주 사용됩니다.
    

**TCP/IP 프로토콜을 스택 4계층으로 짓고 설명하시오**

- 정답
    - **LINK 계층**
        
        물리적인 영역의 표준화에 대한 결과
        
        가장 기본이 되는 영역으로 LAN, WAN과 같은 네트워크 표준과 관련된 프로토콜을 정의하는 영역이다
        
    - **IP 계층**
        
        경로 검색을 해주는 계층임
        
        IP 자체는 비연결지향적이며, 신뢰할 수 없는 프로토콜이다
        
        데이터를 전송할 때마다 거쳐야할 경로를 선택해주지만, 경로가 일정하지 않음. 또한 데이터 전송 중에 경로상 문제가 발생할 때 데이터가 손실되거나 오류가 발생하는 문제가 발생할 수 있음. 따라서 IP 계층은 오류 발생에 대한 대비가 되어있지 않은 프로토콜임
        
    - **TCP/UDP (전송) 계층**
        
        데이터의 실제 송수신을 담당함
        
        UDP는 TCP에 비해 상대적으로 간단하고, TCP는 신뢰성잇는 데이터 전송을 담당함
        
        TCP는 데이터 전송 시, IP 프로토콜이 기반임 (IP는 문제 해결에 문제가 있는데 TCP가 신뢰라고?)
        
        → IP의 문제를 해결해주는 것이 TCP인 것. 데이터의 순서가 올바르게 전송 갔는지 확인해주며 대화를 주고받는 방식임. 이처럼 확인 절차를 걸치며 신뢰성 없는 IP에 신뢰성을 부여한 프로토콜이 TCP이다
        
    - **애플리케이션 계층**
        
        서버와 클라이언트를 만드는 과정에서 프로그램 성격에 따라 데이터 송수신에 대한 약속들이 정해지는데, 이것이 바로 애플리케이션 계층이다
        

**TCP란?**

- 정답
    
    **Transmission Control Protocol**
    
    서버와 클라이언트간에 데이터를 **신뢰성 있게** 전달하기 위해 만들어진 프로토콜이다.  
    
- 꼬리 질문 : TCP의 특징은?
    
    신뢰성
    
    - (Sequence Number, Ack Number) 사용
    
    연결형 서비스
    
    - 3-way handshake 로 연결 설정
    - 4-way handshake로 연결 해제
    
    데이터 순서 보장
    
    - **시퀀스 번호 (Sequence Number)**: TCP 세그먼트는 각각 고유의 시퀀스 번호를 가집니다. 이 번호를 통해 수신자는 데이터가 어떤 순서로 전송되었는지 알 수 있습니다.
    - **재정렬 (Reordering)**: 수신자는 도착한 TCP 세그먼트를 시퀀스 번호에 따라 정렬합니다. 만약 순서가 뒤바뀐 세그먼트가 도착하면, 이를 올바른 순서로 재정렬합니다.
    - **ACK (Acknowledgment)**: 수신자는 수신된 데이터의 시퀀스 번호를 기반으로 확인 응답(ACK)을 송신자에게 보냅니다. 만약 어떤 세그먼트가 손실되었거나 순서가 어긋났다면, 송신자는 해당 세그먼트를 재전송합니다.
    
    데이터 흐름제어 및 혼잡제어
    
    - **흐름 제어(Flow Control)**: 송신자가 수신자의 처리 능력을 초과하여 데이터를 전송하지 않도록 조절합니다. 이를 위해 윈도우 크기를 조정하며, 수신자는 자신의 수신 버퍼 상태를 송신자에게 알립니다.
    - **혼잡 제어(Congestion Control)**: 네트워크 혼잡을 피하기 위해 송신 속도를 조절합니다. 이를 위해 TCP는 여러 가지 알고리즘(e.g., Slow Start, Congestion Avoidance, Fast Retransmit, Fast Recovery)을 사용하여 네트워크 상태에 따라 데이터 전송 속도를 조절합니다.
    
    전이중(Full-Duplex), 점대점(Point to Point) 서비스
    
    - 전이중(Full-Duplex) : 전송이 양방향으로 동시에 일어날 수 있다
    - 점대점(Point to Point) : **각 연결이 정확히 2개의 종단점을 가지고 있다**.

**3-way handshaking이란?**

- 정답
    
    TCP연결을 설정하기 위해 클라이언트와 서버가 교환하는 3가지 단계
    
    SYN
    
    SYN + ACK
    
    ACK
    

**UDP란?**

- 정답
    
    **User Datagram Protocol**
    
    비연결형 서비스를 지원하는 전송계층 프로토콜로입니다
    인터넷상에서 서로 정보를 주고받을 때 정보를 보낸다는 신호나 받는다는 신호 절차를거치지 않고, 보내는 쪽에서 일방적으로 데이터를 전달하는 통신 프로토콜입니다.
    
    신뢰성을 낮지만 속도가 빠르다
    
    주로 스트리밍에 활용된다
    

3 way-handshake와 4 way-handshake를 설명해주세요.

- 정답
    
    **3 way-handshake란** TCP 네트워크에서 통신 하는 장치가 서로 연결이 잘 되었는지 확인하는 방법입니다. 송신자와 수신자는 총 3번에 걸쳐 데이터를 주고 받으며 통신이 가능한 상태인지 확인합니다.
    
    **4 way-handshake란** TCP 네트워크에서 통신 하는 장치의 연결을 해제하는 방법입니다. 송신자와 수신자는 총 4번에 걸쳐 데이터를 주고 받으며 연결을 끊습니다.
    

**3-Handshaking과 4-Handshaking의 과정은?**

- 정답
    
    3-way handshake
    
    1. A 클라이언트는 B서버에 접속을 요청하는 SYN 패킷을 보낸다. 이때 A 클라이언트는 SYN을 보내고 SYN/ACK 응답을 기다리는 SYN_SENT 상태가 되는 것이다.
    2. B서버는 SYN 요청을 받고 A클라이언트에게 요청을 수락한다는 ACK와 SYN flag가 설정된 패킷을 발송하고 A가 다시 ACK으로 응답하기를 기다린다. 이떄 B서버는 SYN_RECIVED상태가 된다.
    3. A클라이언트는 B서버에게 ACK을 보내고 이후로 연결이 이루어지고 데이터가 오가게 되는 것이다. 이 떄의 B서버 상태가 ESTABLISHED이다. 
    
    4-way handshake
    
    1. 클라이언트가 연결을 종료하겠다는 FIN 플래그를 전송한다.
    2. 서버는 일단 확인메세지를 보내고 자신의 통신이 끝날때까지 기다리는데 이 상태가 TIME_WAIT상태다.
    3. 서버가 통신이 끝났으면 연결이 종료되었다고 클라이언트에게 FIN플래그를 전송한다.
    4. 클라이언트는 확인했다는 메세지를 보낸다.

**UDP는 항상 신뢰성을 보장하지 않나요?**

- 정답
    
    UDP는 신뢰성을 보장하지 않으며, 이는 빠른 속도가 필요하거나 신뢰성이 그다지 중요하지 않은 상황에 적합합니다.
    

**TCP의 신뢰성을 보장하는 방법을 설명해보세요.**

- 정답
    - 3-Way Handshake
    - (Sequence Number, Ack Number) 사용
        - 시퀀스 번호(Sequence Number): 데이터 스트림의 각 바이트에 부여되는 번호입니다. 송신자는 각 패킷에 시퀀스 번호를 포함시켜 전송합니다.
        - 확인 응답 번호(Acknowledgment Number): 수신자는 수신한 데이터의 다음에 기대하는 바이트의 시퀀스 번호를 ACK 번호로 송신자에게 보냅니다.
    - 흐름 제어
    - 혼잡 제어
    - 데이터 무결성 검사 (Checksum)
        - TCP는 각 패킷에 체크섬 필드를 포함시켜 데이터의 무결성을 확인합니다. 수신자는 체크섬을 통해 데이터가 전송 중 손상되지 않았는지 검사합니다. 만약 데이터가 손상되었으면 해당 패킷을 폐기하고 재전송을 요청합니다.
    - 데이터 재전송
        - TCP는 데이터 전송 중 손실된 패킷을 감지하고, 재전송을 통해 손실된 데이터를 회복합니다. 이 과정은 다음과 같이 이루어집니다:
        - 타임아웃 재전송: 송신자가 데이터를 전송한 후 일정 시간 내에 ACK를 받지 못하면, 해당 데이터를 재전송합니다.
        - 중복 ACK 기반 재전송: 수신자가 동일한 ACK 번호를 세 번 연속으로 보내면, 송신자는 특정 패킷이 손실되었음을 인지하고, 손실된 패킷을 재전송합니다.

**TCP와 UDP는 왜 나오게 됐는가?**

- 정답
    1. **IP**의 역할은 Host to Host (장치 to 장치)만을 지원한다. 장치에서 장치로 이동은 IP로 해결되지만, **하나의 장비 안에서 수많은 프로그램들이 통신을 할 경우에는 IP만으로는 한계가 있다.**
    2. 또한, IP에서 오류가 발생한다면 ICMP에서 알려준다. 하지만 ICMP는  IP보다 위에서 처리를 해줘야 한다.ICMP : 인터넷 제어 메시지 프로토콜로 네트워크 컴퓨터 위에서 돌아가는 운영체제에서 오류 메시지를 전송받는데 주로 쓰임
        
        알려주기만 할 뿐 대처를 못하기 때문에
        
    - 1번을 해결하기 위하여 포트 번호가 나오게 됐고, 2번을 해결하기 위해 상위 프로토콜인 TCP와 UDP가 나오게 되었다.
- 꼬리질문
    
    **그렇다면 TCP와 UDP가 어떻게 오류를 해결하는가?**
    
    - **TCP**
        - 데이터의 분실, 중복, 순서가 뒤바뀜 등을 자동으로 보정해 줘서 송수신 데이터의 **정확한 전달**을 할 수 있도록 해준다.
    - **UDP**
        - **IP가 제공하는 정도의 수준만을 제공하는** 간단한 IP 상위 계층의 프로토콜이다. TCP와는 다르게 에러가 날 수도 있고, 재전송이나 순서가 뒤바뀔 수도 있어서 이 경우, 애플리케이션에서 처리하는 번거로움이 존재한다.

**흐름제어와 혼잡제어가 무엇인가요?** 

- 정답
    
    흐름 제어는 송신자의 전송 속도와 수신자의 처리 속도의 차이에서 생기는 문제를 해결하기 위한 기능입니다.
    
    혼잡제어는 송신자의 전송 속도와 네트워크의 처리속도 차이로 인한 문제를 해결하기 위한 기능입니다.
    

**흐름제어와 혼잡제어를 하는 방법이 뭐가있을까요?**  

- 정답
    - 흐름제어
        - Stop & Wait 방식
            
            데이터를 보낼 때마다 아래의 과정을 반복한다. Stop and Wait 방식은 송신자가 데이터를 하나 보낼 때마다 수신자의 응답을 기다립니다. 구현이 간단하다는 장점은 있지만 매우 비효율적인 방법입니다.
            
            ```cpp
            1.송신자가 수신자에게 데이터를 보냅니다.
            2.수신자는 송신자에게 데이터를 받을 때마다 자신의 남은 버퍼 공간을 알려줍니다.
            3.송신자는 수신자가 보낸 정보를 보고 자신의 데이터 전송 속도를 조절합니다.
            ```
            
        - Sliding Window 방식
            
            비효율적인 Stop and Wait 방식을 개선한 것 중 하나는 Sliding Window 방식입니다.
            Sliding Window 방식은 데이터를 하나만 보내고 기다리는 것이 아닌, 한 번에 여러 개의 데이터를 보내고 수신자의 응답을 기다립니다.
            
    - 혼잡 제어
        - 혼잡 제어를 위해 AIMD(Additive Increase / Multiplicative Decrease)라는 기술을 사용합니다. AIMD는 처음에 조금씩 패킷을 보내다가, 패킷이 문제 없이 도착하면 전송량을 조금씩 늘려갑니다. 만약 패킷 전송에 실패하게 되면 네트워크가 혼잡하다고 판단하고 패킷 전송 속도를 절반으로 줄입니다.

**TCP의 연결 과정과 연결 종료 과정 단계가 차이나는 이유가 뭔가요?** 

- 정답
    
    연결을 설정할 때에는 양쪽이 연결할 준비가 되었음을 확인하는 것이 목적이므로 3단계로 충분하다. 하지만, 연결을 종료할 떄에는 양방향으로 데이터를 안전하게 종료해야 하므로 
    

**만약 Server에서 Fin 플래그를 전송하기 전에 전송한 패킷이 라우팅 지연이나 패킷 유실로 인한 재전송 등으로 인해 FIN 패킷보다 늦게 도착하는 상황이 발생하면 어떻게 될까요?** 

- 정답
    
    이러한 상황을 위해서 서버의 FIN 플래그를 수신한 클라이언트는 ACK를 보낸 후 TIME WAIT를 통해 일정 시간 세션을 종료하지 않고 잉여 패킷을 기다린다.
    

**초기 Sequence Number인 ISN을 0부터 시작하지 않고 난수를 생성해서 설정하는 이유가 있나요?** 

- 정답
    
    ISN : initial sequence number (초기 시퀀스 수)
    
    Connection을 맺을 때 사용하는 포트(Port)는 유한 범위 내에서 사용하고 시간이 지남에 따라 재사용됩니다. 따라서 두 통신 호스트가 과거에 사용된 포트 번호 쌍을 사용하는 가능성이 존재합니다. **서버 측에서는 패킷의 SYN을 보고 패킷을 구분하게 되는데 난수가 아닌 순처적인 Number가 전송된다면 이전의 Connection으로부터 오는 패킷으로 인식할 수 있습니다.** 이러한 문제가 발생할 가능성을 줄이기 위해서 난수로 ISN을 설정합니다.
    

**UDP는 왜 사용할까?**

- 정답
    - UDP의 결정적인 장점은 **데이터의 신속성**이다. 데이터의 처리가 TCP보다 빠르다.
    - 주로 **실시간 방송과 온라인 게임**에서 사용된다. 네트워크 환경이 안 좋을 때, 끊기는 현상을 생각하면 된다.
    

**DNS(Domain Name Service)에서 UDP를 사용하는 이유**

- 정답
    
    https://esoongan.tistory.com/148
    
    DNS는 신뢰성보다 속도가 더 중요한 서비스이기때문에 TCP보다 UDP가 더 적합하다.
    
    **도메인네임을 IP로 변경해주는 서비스를 제공하는 DNS서버는, 많은 클라이언트를 수용해야하기때문에 연결상태를 유지하지않아 정보기록을 최소화할수있는 UDP가 알맞은 것이다.**
    
    **DNS는 도메인이름과 IP 주소를 서로 변환하는 역할을 한다.**
    
    이때, TCP를 사용하게 되면, 데이터를 송신할 때까지 세션 확립을 위한 처리를 하고, 송신한 데이터가 수신되었는지 점검하는 과정이 필요하므로, Protocol overhead가 UDP에 비해서 큼.
    
    **DNS는 Application layer protocol임.**
    
    모든 Application layer protocol은 TCP, UDP 중 하나의 Transport layer protocol을 사용해야 함.
    
    (TCP는 reliable, UDP는 not reliable임)
    
    **DNS는 reliable 해야 할 것 같은데 왜 UDP를 사용할까?**
    
    1. TCP가 3-way handshake를 사용하는 반면,
        
        UDP는 connection을 유지할 필요가 없음.
        
    2. DNS request는 UDP segment에 꼭 들어갈 정도로 작음.
    3. UDP는 not reliable이나, reliability는 application layer에 추가될 수 있음. (Timeout 추가나, resend 작업을 통해)
    
    **DNS는 UDP를 53번 port에서 사용함.**
    
    **그러나 TCP를 사용할 때가 있다!**
    
    크기가 512 bytes(UDP 제한)이 넘을 때나 응답을 못 받은 경우, TCP를 사용해야 한다.
    

**TCP 헤더를 설명하세요.**

- 정답
    
    헤더에 다음과 같은 정보가 저장되어 있음 : 
    
    - 송신 측과 수신 측의 포트번호
    - 연결 정보가 기록된 제어 비트
    - 오류를 검출할 때 사용되는 체크섬
    - 몇 번째 데이터인지 알려주는 시퀀스 번호
    - 몇 번째 데이터까지 수신했는지 알려주는 ACK번호
    - 윈도우 크기